name: Build

on: [push]

jobs:
  build:
    name: Build

    strategy:
      matrix:
        target:
          - id: 'linux-amd64'
            os: 'ubuntu-18.04'
            llvm_prefix: llvm-project/build/install
          #- id: 'linux-aarch64'
          #  os: ['self-hosted', 'linux', 'ARM64']
          #  llvm_prefix: llvm-project/build/install
          - id: 'darwin-amd64'
            os: 'macos-latest'
            llvm_prefix: llvm-project/build/install
          - id: 'windows-amd64'
            os: 'windows-2016'
            llvm_prefix: llvm-project/build/Release
        llvm_version: ['11.x', '12.x', '13.x']
        llvm_repo_url: ['https://github.com/llvm/llvm-project.git']
      fail-fast: true

    runs-on: ${{ matrix.target.os }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Install `ninja` on Ubuntu
        if: matrix.target.id == 'linux-amd64'
        shell: bash
        run: |
          sudo apt-get install ninja-build

      - name: Install `ninja` on macOS
        if: startsWith(matrix.target.id, 'darwin-')
        shell: bash
        run: |
          brew install ninja

      # TODO(jubianchi): Re-enable this to build on MingW
      # - name: Install `ninja` on Windows
      #   if: startsWith(matrix.target.id, 'windows-')
      #   shell: bash
      #   run: |
      #     choco install ninja

      - name: Build
        if: matrix.target.id != 'windows-amd64'
        shell: bash
        run: |
          ./build.sh ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }}

      - name: Build (Windows)
        if: matrix.target.id == 'windows-amd64'
        shell: |
          powershell -Command "& '{0}'"
        run: |
          ./build.ps1 ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }}

      - name: Inspect
        shell: bash
        run: |
          ${{ matrix.target.llvm_prefix }}/bin/llvm-config --version
          ${{ matrix.target.llvm_prefix }}/bin/clang --version

      - name: Zip
        shell: bash
        run: |
          mv ${{ matrix.target.llvm_prefix }} llvm-project/build/llvm
          mkdir dist
          tar -C llvm-project/build/llvm -zJvf dist/llvm.tar.xz .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.id }}-${{ matrix.llvm_version }}
          path: dist
          if-no-files-found: error
          retention-days: 1

  release:
    name: Release

    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/tags/')

    needs: [build]

    strategy:
      matrix:
        llvm_version: ['11.x', '12.x', '13.x']

    steps:
      - name: Download the Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Inspect
        shell: bash
        run: |
          ls -laGiR ./*

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ matrix.llvm_version }}
          name: Release ${{ matrix.llvm_version }}
          allowUpdates: true
          draft: false
          prerelease: false

      - name: Upload Release Asset Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux-amd64-${{matrix.llvm_version}}/llvm.tar.xz
          asset_name: linux-amd64.tar.xz
          asset_content_type: application/gzip

      #- name: Upload Release Asset Linux (ARM64)
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }}
      #    asset_path: artifacts/linux-aarch64-${{matrix.llvm_version}}/llvm.tar.xz
      #    asset_name: linux-aarch64.tar.xz
      #    asset_content_type: application/gzip

      - name: Upload Release Asset Darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/darwin-amd64-${{matrix.llvm_version}}/llvm.tar.xz
          asset_name: darwin-amd64.tar.xz
          asset_content_type: application/gzip

      - name: Upload Release Asset Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows-amd64-${{matrix.llvm_version}}/llvm.tar.xz
          asset_name: windows-amd64.tar.xz
          asset_content_type: application/gzip
